#include <cassert>
#include <algorithm>
#include <functional>

#include <cppunit/extensions/HelperMacros.h>

#include "test/loader/TestExecutables.h"
#include "memory/VirtualMemory.h"

Segment::Segment(addr_t vm_start_, addr_t fl_start_, std::size_t size_, int prot_)
:
vm_start(vm_start_),
fl_start(fl_start_),
size(size_),
prot(prot_)
{}

/**
 * ELF testing file 1: computes Fibonacci number
 * output from arm-elf-readelf:
 * Program Headers:
 *   Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
 *   LOAD           0x008000 0x00008000 0x00008000 0x00034 0x00034 R E 0x8000
 */

ELFTestExecutable::ELFTestExecutable()
{}

ELFTestExecutable_Fibonacci::ELFTestExecutable_Fibonacci()
{
    entry_point = 0x8000;
    segments.push_back(Segment(0x8000, 0x8000, 0x34, Memory::Execute | Memory::Read));
    const char prolog[] =
        "\x7f\x45\x4c\x46\x01\x01\x01\x61\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x02\x00\x28\x00\x01\x00\x00\x00\x00\x80\x00\x00\x34\x00\x00\x00"
        "\x98\x80\x00\x00\x00\x06\x00\x00\x34\x00\x20\x00\x01\x00\x28\x00"
        "\x05\x00\x04\x00\x01\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00"
        "\x00\x80\x00\x00\x34\x00\x00\x00\x34\x00\x00\x00\x05\x00\x00\x00"
        "\x00\x80";

    const char epilog[] = 
        "\x01\x00\x50\xe3\x00\x30\xa0\xd1\x07\x00\x00\xda\x02\x00\x40\xe2"
        "\x01\x20\xa0\xe3\x00\x10\xa0\xe3\x02\x30\x81\xe0\x02\x10\xa0\xe1"
        "\x01\x00\x50\xe2\x03\x20\xa0\x51\xfa\xff\xff\x5a\x03\x00\xa0\xe1"
        "\x1e\xff\x2f\xe1\x00\x47\x43\x43\x3a\x20\x28\x47\x4e\x55\x29\x20"
        "\x34\x2e\x32\x2e\x33\x20\x32\x30\x30\x37\x31\x30\x32\x38\x20\x28"
        "\x70\x72\x65\x72\x65\x6c\x65\x61\x73\x65\x29\x00\x41\x0f\x00\x00"
        "\x00\x61\x65\x61\x62\x69\x00\x01\x05\x00\x00\x00\x00\x2e\x73\x68"
        "\x73\x74\x72\x74\x61\x62\x00\x2e\x74\x65\x78\x74\x00\x2e\x63\x6f"
        "\x6d\x6d\x65\x6e\x74\x00\x2e\x41\x52\x4d\x2e\x61\x74\x74\x72\x69"
        "\x62\x75\x74\x65\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0b\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x00\x80\x00\x00"
        "\x00\x80\x00\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x04\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x34\x80\x00\x00\x28\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        "\x1a\x00\x00\x00\x03\x00\x00\x70\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x5c\x80\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x80\x00\x00\x2a\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00";
    const int zeros = 32686;
    contents.insert(contents.end(), prolog, prolog + (sizeof(prolog)-1)/sizeof(char));
    contents.insert(contents.end(), zeros, 0);
    contents.insert(contents.end(), epilog, epilog + (sizeof(epilog)-1)/sizeof(char));
    assert(contents.size() == 33120);
}

/**
 * ELF testing file 2: computes all permutations
 * output from arm-elf-readelf:
ELF Header:
  Entry point address:               0x81bc
Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  LOAD           0x008000 0x00008000 0x00008000 0x005dc 0x005dc R E 0x8000
 */

ELFTestExecutable_Prec::ELFTestExecutable_Prec()
{
    entry_point = 0x81bc;
    segments.push_back(Segment(0x8000, 0x8000, 0x05dc, Memory::Execute | Memory::Read));
    const char part_0[] =
        "\x7f\x45\x4c\x46\x01\x01\x01\x61\x04\x00\x00\x00\x03\x00\x00\x00" 
        "\x02\x00\x28\x00\x01\x00\x00\x00\xbc\x81\x00\x00\x34\x00\x00\x00" 
        "\xb8\x8a\x00\x00\x02\x06\x00\x00\x34\x00\x20\x00\x01\x00\x28\x00" 
        "\x0d\x00\x0a\x00\x01\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00" 
        "\x00\x80\x00\x00\xdc\x05\x00\x00\xdc\x05\x00\x00\x05\x00\x00\x00" 
        "\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    const std::size_t zeros_0 = 2042 * 16;


    const char part_1[] = 
        "\x00\x00\x50\xe3\x01\x30\xa0\xd3\x03\x00\x00\xda\x01\x30\xa0\xe3"
        "\x90\x03\x03\xe0\x01\x00\x50\xe2\xfc\xff\xff\x1a\x03\x00\xa0\xe1"
        "\x1e\xff\x2f\xe1\xf0\x45\x2d\xe9\x00\x50\xa0\xe1\x01\x80\xa0\xe1"
        "\x01\x00\xa0\xe1\xf1\xff\xff\xeb\x00\x00\x58\xe3\x00\xa0\xa0\xd3"
        "\x22\x00\x00\xda\x1b\x00\x00\xea\x07\x10\xa0\xe1\x7a\x00\x00\xeb"
        "\x00\xc0\x96\xe5\x00\x00\x54\xe3\x0b\x00\x00\xda\x0c\x10\xa0\xe1"
        "\x00\x20\xa0\xe3\x02\x31\x95\xe7\x03\x00\x5c\xe1\x01\x10\x41\xc2"
        "\x01\x20\x82\xe2\x04\x00\x52\xe1\xf9\xff\xff\x1a\x01\x70\x47\xe2"
        "\x04\x60\x86\xe2\x01\xc0\xa0\xe1\x04\x00\x00\xea\x01\x30\x48\xe2"
        "\x03\x70\x64\xe0\x01\x30\x84\xe2\x03\x31\xa0\xe1\x05\x60\x83\xe0"
        "\x01\x30\x4c\xe2\x90\xa3\x2a\xe0\x01\x40\x84\xe2\x04\x00\x58\xe1"
        "\xe4\xff\xff\xca\x05\x00\x00\xea\x08\x10\xa0\xe1\x5e\x00\x00\xeb"
        "\x00\xc0\x95\xe5\x00\xa0\xa0\xe3\x0a\x40\xa0\xe1\xee\xff\xff\xea"
        "\x01\x00\x8a\xe2\xf0\x85\xbd\xe8\xf0\x45\x2d\xe9\x00\x40\xa0\xe1"
        "\x01\x80\xa0\xe1\x02\x50\xa0\xe1\x02\x00\xa0\xe1\xc3\xff\xff\xeb"
        "\x00\xa0\xa0\xe1\x00\x00\x55\xe3\x07\x00\x00\xda\xb4\x30\x9f\xe5"
        "\x00\x10\x93\xe5\x00\x20\xa0\xe3\x00\x30\xa0\xe3\x02\x31\x81\xe7"
        "\x01\x20\x82\xe2\x05\x00\x52\xe1\xfa\xff\xff\x1a\x04\x00\x5a\xe1"
        "\x00\x00\xa0\xb3\xf0\x85\xbd\xb8\x00\x00\x55\xe3\x1f\x00\x00\xda"
        "\x80\x30\x9f\xe5\x00\x60\x93\xe5\x05\x70\xa0\xe1\x0a\x00\xa0\xe1"
        "\x07\x10\xa0\xe1\x3c\x00\x00\xeb\x00\xa0\xa0\xe1\x01\x40\x44\xe2"
        "\x04\x00\xa0\xe1\x0a\x10\xa0\xe1\x37\x00\x00\xeb\x01\x50\x80\xe2"
        "\x04\x00\xa0\xe1\x0a\x10\xa0\xe1\xc1\x00\x00\xeb\x01\x40\x80\xe2"
        "\x00\x50\x88\xe5\x00\x20\xa0\xe3\x02\x31\x96\xe7\x00\x00\x53\xe3"
        "\x01\x50\x45\x02\x00\x00\x55\xe3\x01\x20\x82\x12\xf9\xff\xff\x1a"
        "\x01\x30\x82\xe2\x04\x30\x88\xe4\x03\x31\xa0\xe1\x06\x30\x83\xe0"
        "\x01\x20\xa0\xe3\x04\x20\x03\xe5\x01\x70\x57\xe2\xe2\xff\xff\x1a"
        "\x01\x00\xa0\xe3\xf0\x85\xbd\xe8\xd8\x85\x00\x00\x70\x40\x2d\xe9"
        "\x00\x60\xa0\xe1\x8d\xff\xff\xeb\x00\x50\xa0\xe1\x01\x00\x50\xe3"
        "\x06\x00\x00\xda\x01\x30\xa0\xe3\x83\x20\xa0\xe1\x83\x31\xa0\xe1"
        "\x03\x30\x82\xe0\x03\x00\x55\xe1\x02\x00\x00\xda\xf9\xff\xff\xea"
        "\x00\x00\x50\xe3\x0e\x00\x00\xda\x01\x40\xa0\xe3\x04\x00\xa0\xe1"
        "\x02\x11\xa0\xe3\x06\x20\xa0\xe1\xb2\xff\xff\xeb\x02\x01\xa0\xe3"
        "\x06\x10\xa0\xe1\x82\xff\xff\xeb\x00\x00\x54\xe1\x01\x00\x00\x0a"
        "\x01\x00\xa0\xe3\x70\x80\xbd\xe8\x01\x40\x84\xe2\x04\x00\x55\xe1"
        "\xf1\xff\xff\xaa\x00\x00\xa0\xe3\x70\x80\xbd\xe8\x00\x00\x51\xe3"
        "\x01\xc0\x20\xe0\x80\x00\x00\x0a\x00\x10\x61\x42\x01\x20\x51\xe2"
        "\x70\x00\x00\x0a\x00\x30\xb0\xe1\x00\x30\x60\x42\x01\x00\x53\xe1"
        "\x6f\x00\x00\x9a\x02\x00\x11\xe1\x71\x00\x00\x0a\x13\x2f\x6f\xe1"
        "\x11\x0f\x6f\xe1\x02\x20\x40\xe0\x1f\x20\x72\xe2\x82\x20\x82\x10"
        "\x00\x00\xa0\xe3\x02\xf1\x8f\x10\x00\x00\xa0\xe1\x81\x0f\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x3f\x43\x20\x01\x0f\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x3f\x43\x20\x81\x0e\x53\xe1\x00\x00\xa0\xe0\x81\x3e\x43\x20"
        "\x01\x0e\x53\xe1\x00\x00\xa0\xe0\x01\x3e\x43\x20\x81\x0d\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x3d\x43\x20\x01\x0d\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x3d\x43\x20\x81\x0c\x53\xe1\x00\x00\xa0\xe0\x81\x3c\x43\x20"
        "\x01\x0c\x53\xe1\x00\x00\xa0\xe0\x01\x3c\x43\x20\x81\x0b\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x3b\x43\x20\x01\x0b\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x3b\x43\x20\x81\x0a\x53\xe1\x00\x00\xa0\xe0\x81\x3a\x43\x20"
        "\x01\x0a\x53\xe1\x00\x00\xa0\xe0\x01\x3a\x43\x20\x81\x09\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x39\x43\x20\x01\x09\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x39\x43\x20\x81\x08\x53\xe1\x00\x00\xa0\xe0\x81\x38\x43\x20"
        "\x01\x08\x53\xe1\x00\x00\xa0\xe0\x01\x38\x43\x20\x81\x07\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x37\x43\x20\x01\x07\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x37\x43\x20\x81\x06\x53\xe1\x00\x00\xa0\xe0\x81\x36\x43\x20"
        "\x01\x06\x53\xe1\x00\x00\xa0\xe0\x01\x36\x43\x20\x81\x05\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x35\x43\x20\x01\x05\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x35\x43\x20\x81\x04\x53\xe1\x00\x00\xa0\xe0\x81\x34\x43\x20"
        "\x01\x04\x53\xe1\x00\x00\xa0\xe0\x01\x34\x43\x20\x81\x03\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x33\x43\x20\x01\x03\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x33\x43\x20\x81\x02\x53\xe1\x00\x00\xa0\xe0\x81\x32\x43\x20"
        "\x01\x02\x53\xe1\x00\x00\xa0\xe0\x01\x32\x43\x20\x81\x01\x53\xe1"
        "\x00\x00\xa0\xe0\x81\x31\x43\x20\x01\x01\x53\xe1\x00\x00\xa0\xe0"
        "\x01\x31\x43\x20\x81\x00\x53\xe1\x00\x00\xa0\xe0\x81\x30\x43\x20"
        "\x01\x00\x53\xe1\x00\x00\xa0\xe0\x01\x30\x43\x20\x00\x00\x5c\xe3"
        "\x00\x00\x60\x42\x1e\xff\x2f\xe1\x00\x00\x3c\xe1\x00\x00\x60\x42"
        "\x1e\xff\x2f\xe1\x00\x00\xa0\x33\xcc\x0f\xa0\x01\x01\x00\x80\x03"
        "\x1e\xff\x2f\xe1\x11\x2f\x6f\xe1\x1f\x20\x62\xe2\x00\x00\x5c\xe3"
        "\x33\x02\xa0\xe1\x00\x00\x60\x42\x1e\xff\x2f\xe1\x08\xe0\x2d\xe5"
        "\x5f\x00\x00\xeb\x00\x00\xa0\xe3\x08\xf0\x9d\xe4\x03\x40\x2d\xe9"
        "\x75\xff\xff\xeb\x06\x40\xbd\xe8\x92\x00\x03\xe0\x03\x10\x41\xe0"
        "\x1e\xff\x2f\xe1\x00\x00\x51\xe3\x51\x00\x00\x0a\x00\x10\x61\x42"
        "\x00\xc0\xb0\xe1\x00\x00\x60\x42\x01\x20\x51\xe2\x01\x00\x50\x11"
        "\x00\x00\xa0\x03\x02\x00\x11\x81\x02\x00\x00\x00\x45\x00\x00\x9a"
        "\x11\x2f\x6f\xe1\x10\x3f\x6f\xe1\x03\x20\x42\xe0\x1f\x20\x72\xe2"
        "\x82\xf1\x8f\x10\x00\x00\xa0\xe1\x81\x0f\x50\xe1\x81\x0f\x40\x20"
        "\x01\x0f\x50\xe1\x01\x0f\x40\x20\x81\x0e\x50\xe1\x81\x0e\x40\x20"
        "\x01\x0e\x50\xe1\x01\x0e\x40\x20\x81\x0d\x50\xe1\x81\x0d\x40\x20"
        "\x01\x0d\x50\xe1\x01\x0d\x40\x20\x81\x0c\x50\xe1\x81\x0c\x40\x20"
        "\x01\x0c\x50\xe1\x01\x0c\x40\x20\x81\x0b\x50\xe1\x81\x0b\x40\x20"
        "\x01\x0b\x50\xe1\x01\x0b\x40\x20\x81\x0a\x50\xe1\x81\x0a\x40\x20"
        "\x01\x0a\x50\xe1\x01\x0a\x40\x20\x81\x09\x50\xe1\x81\x09\x40\x20"
        "\x01\x09\x50\xe1\x01\x09\x40\x20\x81\x08\x50\xe1\x81\x08\x40\x20"
        "\x01\x08\x50\xe1\x01\x08\x40\x20\x81\x07\x50\xe1\x81\x07\x40\x20"
        "\x01\x07\x50\xe1\x01\x07\x40\x20\x81\x06\x50\xe1\x81\x06\x40\x20"
        "\x01\x06\x50\xe1\x01\x06\x40\x20\x81\x05\x50\xe1\x81\x05\x40\x20"
        "\x01\x05\x50\xe1\x01\x05\x40\x20\x81\x04\x50\xe1\x81\x04\x40\x20"
        "\x01\x04\x50\xe1\x01\x04\x40\x20\x81\x03\x50\xe1\x81\x03\x40\x20"
        "\x01\x03\x50\xe1\x01\x03\x40\x20\x81\x02\x50\xe1\x81\x02\x40\x20"
        "\x01\x02\x50\xe1\x01\x02\x40\x20\x81\x01\x50\xe1\x81\x01\x40\x20"
        "\x01\x01\x50\xe1\x01\x01\x40\x20\x81\x00\x50\xe1\x81\x00\x40\x20"
        "\x01\x00\x50\xe1\x01\x00\x40\x20\x00\x00\x5c\xe3\x00\x00\x60\x42"
        "\x1e\xff\x2f\xe1\x08\xe0\x2d\xe5\x01\x00\x00\xeb\x00\x00\xa0\xe3"
        "\x08\xf0\x9d\xe4\x1e\xff\x2f\xe1\x00\x00\x00\x90\x00\x47\x43\x43"
        "\x3a\x20\x28\x47\x4e\x55\x29\x20\x34\x2e\x32\x2e\x33\x20\x32\x30"
        "\x30\x37\x31\x30\x32\x38\x20\x28\x70\x72\x65\x72\x65\x6c\x65\x61"
        "\x73\x65\x29\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x02\x00\x00\x00"
        "\x00\x00\x04\x00\x00\x00\x00\x00\x3c\x82\x00\x00\x38\x02\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x02\x00\xa3\x00"
        "\x00\x00\x04\x00\x00\x00\x00\x00\x74\x84\x00\x00\x60\x01\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x02\x00\x46\x01"
        "\x00\x00\x04\x00\x00\x00\x00\x00\xd4\x85\x00\x00\x04\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x00\x00\x00\x02\x00\x00\x00"
        "\x00\x00\x04\x01\x00\x00\x00\x00\x3c\x82\x00\x00\x74\x84\x00\x00"
        "\x2e\x2e\x2f\x2e\x2e\x2f\x67\x63\x63\x2f\x67\x63\x63\x2f\x63\x6f"
        "\x6e\x66\x69\x67\x2f\x61\x72\x6d\x2f\x6c\x69\x62\x31\x66\x75\x6e"
        "\x63\x73\x2e\x61\x73\x6d\x00\x2f\x55\x73\x65\x72\x73\x2f\x62\x6f"
        "\x72\x69\x73\x64\x75\x73\x65\x6b\x2f\x44\x6f\x63\x75\x6d\x65\x6e"
        "\x74\x73\x2f\x6d\x66\x66\x2f\x69\x74\x2f\x49\x2f\x4c\x53\x2f\x70"
        "\x72\x6f\x67\x72\x61\x6d\x6f\x76\x61\x6e\x69\x5f\x32\x2f\x7a\x61"
        "\x70\x6f\x63\x74\x61\x6b\x2f\x67\x63\x63\x2d\x62\x75\x69\x6c\x64"
        "\x2d\x61\x72\x6d\x2d\x65\x6c\x66\x2f\x67\x63\x63\x00\x47\x4e\x55"
        "\x20\x41\x53\x20\x32\x2e\x31\x38\x00\x01\x80\x9f\x00\x00\x00\x02"
        "\x00\x14\x00\x00\x00\x04\x01\x83\x00\x00\x00\x74\x84\x00\x00\xd4"
        "\x85\x00\x00\x2e\x2e\x2f\x2e\x2e\x2f\x67\x63\x63\x2f\x67\x63\x63"
        "\x2f\x63\x6f\x6e\x66\x69\x67\x2f\x61\x72\x6d\x2f\x6c\x69\x62\x31"
        "\x66\x75\x6e\x63\x73\x2e\x61\x73\x6d\x00\x2f\x55\x73\x65\x72\x73"
        "\x2f\x62\x6f\x72\x69\x73\x64\x75\x73\x65\x6b\x2f\x44\x6f\x63\x75"
        "\x6d\x65\x6e\x74\x73\x2f\x6d\x66\x66\x2f\x69\x74\x2f\x49\x2f\x4c"
        "\x53\x2f\x70\x72\x6f\x67\x72\x61\x6d\x6f\x76\x61\x6e\x69\x5f\x32"
        "\x2f\x7a\x61\x70\x6f\x63\x74\x61\x6b\x2f\x67\x63\x63\x2d\x62\x75"
        "\x69\x6c\x64\x2d\x61\x72\x6d\x2d\x65\x6c\x66\x2f\x67\x63\x63\x00"
        "\x47\x4e\x55\x20\x41\x53\x20\x32\x2e\x31\x38\x00\x01\x80\x9f\x00"
        "\x00\x00\x02\x00\x28\x00\x00\x00\x04\x01\xf0\x00\x00\x00\xd4\x85"
        "\x00\x00\xd8\x85\x00\x00\x2e\x2e\x2f\x2e\x2e\x2f\x67\x63\x63\x2f"
        "\x67\x63\x63\x2f\x63\x6f\x6e\x66\x69\x67\x2f\x61\x72\x6d\x2f\x6c"
        "\x69\x62\x31\x66\x75\x6e\x63\x73\x2e\x61\x73\x6d\x00\x2f\x55\x73"
        "\x65\x72\x73\x2f\x62\x6f\x72\x69\x73\x64\x75\x73\x65\x6b\x2f\x44"
        "\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\x6d\x66\x66\x2f\x69\x74\x2f"
        "\x49\x2f\x4c\x53\x2f\x70\x72\x6f\x67\x72\x61\x6d\x6f\x76\x61\x6e"
        "\x69\x5f\x32\x2f\x7a\x61\x70\x6f\x63\x74\x61\x6b\x2f\x67\x63\x63"
        "\x2d\x62\x75\x69\x6c\x64\x2d\x61\x72\x6d\x2d\x65\x6c\x66\x2f\x67"
        "\x63\x63\x00\x47\x4e\x55\x20\x41\x53\x20\x32\x2e\x31\x38\x00\x01"
        "\x80\x01\x11\x00\x10\x06\x11\x01\x12\x01\x03\x08\x1b\x08\x25\x08"
        "\x13\x05\x00\x00\x00\x01\x11\x00\x10\x06\x11\x01\x12\x01\x03\x08"
        "\x1b\x08\x25\x08\x13\x05\x00\x00\x00\x01\x11\x00\x10\x06\x11\x01"
        "\x12\x01\x03\x08\x1b\x08\x25\x08\x13\x05\x00\x00\x00\x7f\x00\x00"
        "\x00\x02\x00\x3d\x00\x00\x00\x02\x01\xfb\x0e\x0d\x00\x01\x01\x01"
        "\x01\x00\x00\x00\x01\x00\x00\x01\x2e\x2e\x2f\x2e\x2e\x2f\x67\x63"
        "\x63\x2f\x67\x63\x63\x2f\x63\x6f\x6e\x66\x69\x67\x2f\x61\x72\x6d"
        "\x00\x00\x6c\x69\x62\x31\x66\x75\x6e\x63\x73\x2e\x61\x73\x6d\x00"
        "\x01\x00\x00\x00\x00\x05\x02\x3c\x82\x00\x00\x03\xd7\x06\x01\x2f"
        "\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x30\x02\xd0\x01\x14\x2f"
        "\x2f\x30\x2f\x2f\x30\x2f\x2f\x2f\x30\x4c\x2f\x2f\x2f\x32\x03\xc7"
        "\x7a\x66\x03\xc4\x05\x2e\x2f\x2f\x2f\x2f\x2f\x02\x02\x00\x01\x01"
        "\x69\x00\x00\x00\x02\x00\x3d\x00\x00\x00\x02\x01\xfb\x0e\x0d\x00"
        "\x01\x01\x01\x01\x00\x00\x00\x01\x00\x00\x01\x2e\x2e\x2f\x2e\x2e"
        "\x2f\x67\x63\x63\x2f\x67\x63\x63\x2f\x63\x6f\x6e\x66\x69\x67\x2f"
        "\x61\x72\x6d\x00\x00\x6c\x69\x62\x31\x66\x75\x6e\x63\x73\x2e\x61"
        "\x73\x6d\x00\x01\x00\x00\x00\x00\x05\x02\x74\x84\x00\x00\x03\xb6"
        "\x07\x01\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x30\x02\x8c\x01"
        "\x14\x2f\x2f\x32\x03\xf9\x79\x66\x02\x02\x00\x01\x01\x53\x00\x00"
        "\x00\x02\x00\x3d\x00\x00\x00\x02\x01\xfb\x0e\x0d\x00\x01\x01\x01"
        "\x01\x00\x00\x00\x01\x00\x00\x01\x2e\x2e\x2f\x2e\x2e\x2f\x67\x63"
        "\x63\x2f\x67\x63\x63\x2f\x63\x6f\x6e\x66\x69\x67\x2f\x61\x72\x6d"
        "\x00\x00\x6c\x69\x62\x31\x66\x75\x6e\x63\x73\x2e\x61\x73\x6d\x00"
        "\x01\x00\x00\x00\x00\x05\x02\xd4\x85\x00\x00\x03\xd4\x07\x01\x02"
        "\x02\x00\x01\x01\x0c\x00\x00\x00\xff\xff\xff\xff\x01\x00\x01\x7c"
        "\x0e\x0c\x0d\x00\x14\x00\x00\x00\x00\x00\x00\x00\x3c\x82\x00\x00"
        "\x20\x02\x00\x00\x03\x14\x02\x8e\x02\x0e\x08\x00\x0c\x00\x00\x00"
        "\xff\xff\xff\xff\x01\x00\x01\x7c\x0e\x0c\x0d\x00\x14\x00\x00\x00"
        "\x28\x00\x00\x00\x74\x84\x00\x00\x60\x01\x00\x00\x03\x54\x01\x8e"
        "\x02\x0e\x08\x00\x41\x0f\x00\x00\x00\x61\x65\x61\x62\x69\x00\x01"
        "\x05\x00\x00\x00\x00\x2e\x73\x79\x6d\x74\x61\x62\x00\x2e\x73\x74"
        "\x72\x74\x61\x62\x00\x2e\x73\x68\x73\x74\x72\x74\x61\x62\x00\x2e"
        "\x74\x65\x78\x74\x00\x2e\x72\x6f\x64\x61\x74\x61\x00\x2e\x63\x6f"
        "\x6d\x6d\x65\x6e\x74\x00\x2e\x64\x65\x62\x75\x67\x5f\x61\x72\x61"
        "\x6e\x67\x65\x73\x00\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f"
        "\x00\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\x00\x2e"
        "\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x00\x2e\x64\x65\x62\x75"
        "\x67\x5f\x66\x72\x61\x6d\x65\x00\x2e\x41\x52\x4d\x2e\x61\x74\x74"
        "\x72\x69\x62\x75\x74\x65\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x1b\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x00\x80\x00\x00"
        "\x00\x80\x00\x00\xd8\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x04\x00\x00\x00\x00\x00\x00\x00\x21\x00\x00\x00\x01\x00\x00\x00"
        "\x02\x00\x00\x00\xd8\x85\x00\x00\xd8\x85\x00\x00\x04\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00"
        "\x29\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\xdc\x85\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x01\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x08\x86\x00\x00\x60\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00"
        "\x41\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x68\x86\x00\x00\xe9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x01\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x51\x88\x00\x00\x3c\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        "\x5b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x8d\x88\x00\x00\x47\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x67\x00\x00\x00\x01\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x89\x00\x00\x50\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00"
        "\x74\x00\x00\x00\x03\x00\x00\x70\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x24\x8a\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x34\x8a\x00\x00\x84\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\xc0\x8c\x00\x00\xd0\x02\x00\x00\x0c\x00\x00\x00\x17\x00\x00\x00"
        "\x04\x00\x00\x00\x10\x00\x00\x00\x09\x00\x00\x00\x03\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x90\x8f\x00\x00\x17\x01\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x03\x00\x01\x00"
        "\x00\x00\x00\x00\xd8\x85\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x04\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x05\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x06\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x07\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x08\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x09\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\xf1\xff"
        "\x08\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x0b\x00\x00\x00\xb8\x81\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x0e\x00\x00\x00\xd8\x85\x00\x00\x04\x00\x00\x00\x01\x00\x02\x00"
        "\x08\x00\x00\x00\xbc\x81\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x0b\x00\x00\x00\xd8\x85\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00"
        "\x08\x00\x00\x00\x3c\x82\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00"
        "\x0b\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00"
        "\x08\x00\x00\x00\x74\x84\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x0b\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00"
        "\x0b\x00\x00\x00\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00"
        "\x08\x00\x00\x00\xd4\x85\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
        "\x1b\x00\x00\x00\xdc\x85\x00\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x27\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x32\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x40\x00\x00\x00\xdc\x85\x00\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x4e\x00\x00\x00\xd8\x80\x00\x00\xe4\x00\x00\x00\x12\x00\x01\x00"
        "\x62\x00\x00\x00\x3c\x82\x00\x00\x00\x00\x00\x00\x12\x00\x01\x00"
        "\x6f\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x7b\x00\x00\x00\xd4\x85\x00\x00\x04\x00\x00\x00\x12\x00\x01\x00"
        "\x89\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\x95\x00\x00\x00\xbc\x81\x00\x00\x80\x00\x00\x00\x12\x00\x01\x00"
        "\x9a\x00\x00\x00\xd4\x85\x00\x00\x04\x00\x00\x00\x12\x00\x01\x00"
        "\xa1\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\xa9\x00\x00\x00\x00\x80\x00\x00\x24\x00\x00\x00\x12\x00\x01\x00"
        "\xb3\x00\x00\x00\x3c\x82\x00\x00\x20\x02\x00\x00\x12\x00\x01\x00"
        "\xbc\x00\x00\x00\x24\x80\x00\x00\xb4\x00\x00\x00\x12\x00\x01\x00"
        "\xd0\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\xd7\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\xf1\xff"
        "\xdc\x00\x00\x00\x74\x84\x00\x00\x60\x01\x00\x00\x12\x00\x01\x00"
        "\xe5\x00\x00\x00\xd4\x85\x00\x00\x04\x00\x00\x00\x12\x00\x01\x00"
        "\xf3\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x10\x00\x09\x00"
        "\xfa\x00\x00\x00\xdc\x05\x01\x00\x00\x00\x00\x00\x10\x00\x02\x00"
        "\x07\x01\x00\x00\x5c\x84\x00\x00\x18\x00\x00\x00\x12\x00\x01\x00"
        "\x00\x70\x72\x65\x63\x2e\x63\x00\x24\x61\x00\x24\x64\x00\x76\x69"
        "\x73\x69\x74\x65\x64\x2e\x31\x35\x30\x36\x00\x5f\x5f\x65\x78\x69"
        "\x64\x78\x5f\x65\x6e\x64\x00\x5f\x62\x73\x73\x5f\x65\x6e\x64\x5f"
        "\x5f\x00\x5f\x5f\x62\x73\x73\x5f\x73\x74\x61\x72\x74\x5f\x5f\x00"
        "\x5f\x5f\x65\x78\x69\x64\x78\x5f\x73\x74\x61\x72\x74\x00\x70\x6f"
        "\x72\x61\x64\x69\x5f\x6e\x61\x5f\x70\x65\x72\x6d\x75\x74\x61\x63"
        "\x65\x00\x5f\x5f\x61\x65\x61\x62\x69\x5f\x69\x64\x69\x76\x00\x5f"
        "\x5f\x62\x73\x73\x5f\x65\x6e\x64\x5f\x5f\x00\x5f\x5f\x61\x65\x61"
        "\x62\x69\x5f\x6c\x64\x69\x76\x30\x00\x5f\x5f\x62\x73\x73\x5f\x73"
        "\x74\x61\x72\x74\x00\x6d\x61\x69\x6e\x00\x5f\x5f\x64\x69\x76\x30"
        "\x00\x5f\x5f\x65\x6e\x64\x5f\x5f\x00\x66\x61\x6b\x74\x6f\x72\x69"
        "\x61\x6c\x00\x5f\x5f\x64\x69\x76\x73\x69\x33\x00\x70\x65\x72\x6d"
        "\x75\x74\x61\x63\x65\x5f\x6e\x61\x5f\x70\x6f\x72\x61\x64\x69\x00"
        "\x5f\x65\x64\x61\x74\x61\x00\x5f\x65\x6e\x64\x00\x5f\x5f\x6d\x6f"
        "\x64\x73\x69\x33\x00\x5f\x5f\x61\x65\x61\x62\x69\x5f\x69\x64\x69"
        "\x76\x30\x00\x5f\x73\x74\x61\x63\x6b\x00\x5f\x5f\x64\x61\x74\x61"
        "\x5f\x73\x74\x61\x72\x74\x00\x5f\x5f\x61\x65\x61\x62\x69\x5f\x69"
        "\x64\x69\x76\x6d\x6f\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    std::size_t zeros_1 = 242 * 16;
    
    const char part_2[] =
        "\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x18\x00\x00\x00"
        "\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x18\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\xee\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    std::size_t zeros_2 = 255 * 16;

    const char part_3[] = 
        "\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00";

#define PART(n)  contents.append(part_##n, part_##n+(sizeof(part_##n)-1)/sizeof(char))
#define ZEROS(n) contents.append(zeros_##n, '\0');
#define BLOCK(n) PART(n); ZEROS(n)

    BLOCK(0);
    BLOCK(1);
    BLOCK(2);
    PART(3);
}

struct segment_checker : public std::unary_function<const Segment&, void>
{
    segment_checker(const std::string& exe_contents, Memory& mem): exe_(exe_contents), mem_(mem){}
    void operator()(const Segment& segm) const {
        const std::string actual_contents = mem_.read(segm.vm_start, segm.size);

        std::string::const_iterator it = exe_.begin() + segm.fl_start;
        std::string::const_iterator it_end = it + segm.size;
        std::pair<std::string::const_iterator, std::string::const_iterator> comparison = 
            std::mismatch(it, it_end, actual_contents.begin());
        CPPUNIT_ASSERT(comparison.first == it_end);
        for (addr_t addr = segm.vm_start; addr <= segm.vm_start + segm.size; addr += VirtualMemory::page_size())
        {
            CPPUNIT_ASSERT_EQUAL(segm.prot, mem_.get_protect(addr));
        }
        CPPUNIT_ASSERT_EQUAL(segm.prot, mem_.get_protect(segm.vm_start + segm.size - 1));
    }
private:
    segment_checker& operator=(const segment_checker&);
    const std::string& exe_;
    Memory& mem_;
};

struct not_char : public std::unary_function<char, bool>
{
    bool operator()(char c) const {
        return c != '\0';
    }
};

void check_loaded_file(const ELFTestExecutable& exe, Memory& mem)
{
    std::for_each(exe.segments.begin(), exe.segments.end(), segment_checker(exe.contents, mem));
    std::vector<Segment>::const_iterator it1 = exe.segments.begin(), it2 = it1, ie = exe.segments.end();
    if (it2 != ie) {
        ++it2;
        for (; it2 != ie; ++it1, ++it2) {
            const std::string actual_contents = mem.read(it1->vm_start + it1->size, it2->vm_start - (it1->vm_start + it1->size));
            std::string::const_iterator it = std::find_if(actual_contents.begin(), actual_contents.end(), not_char());
            CPPUNIT_ASSERT(it == actual_contents.end());
        }
    }
}
